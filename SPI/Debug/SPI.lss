
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000134  00800060  0000015e  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000306  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c5  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ff  00000000  00000000  00000c99  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000354  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000427  00000000  00000000  00001790  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000140  00000000  00000000  00001bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001cf7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e5       	ldi	r30, 0x5E	; 94
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 48 00 	call	0x90	; 0x90 <main>
  7a:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z8Init_SPIv>:
#include "MAX7219.h"

void Init_SPI(void)
{
	// Config master mode
	PORTB |= (1<<SPI_SS) | (1<<SPI_MOSI) | (1<<SPI_SCK);
  82:	88 b3       	in	r24, 0x18	; 24
  84:	80 66       	ori	r24, 0x60	; 96
  86:	88 bb       	out	0x18, r24	; 24
	// Enable SPI, Master, set clock rate fck/16
	SPCR |= (1<<SPE) | (1<<MSTR) | (1<<SPR0);
  88:	8d b1       	in	r24, 0x0d	; 13
  8a:	81 65       	ori	r24, 0x51	; 81
  8c:	8d b9       	out	0x0d, r24	; 13
  8e:	08 95       	ret

00000090 <main>:
}

int main(void)
{
    /* Replace with your application code */
	Init_SPI();
  90:	0e 94 41 00 	call	0x82	; 0x82 <_Z8Init_SPIv>
	MAX7219_Init();
  94:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z12MAX7219_Initv>
    while (1)
    {
		MAX7219_SendString("abc");
  98:	80 e6       	ldi	r24, 0x60	; 96
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 78 00 	call	0xf0	; 0xf0 <_Z18MAX7219_SendStringPc>
  a0:	fb cf       	rjmp	.-10     	; 0x98 <main+0x8>

000000a2 <_Z18SPI_MasterTransmitc>:
#define OP_SHUTDOWN    12
#define OP_DISPLAYTEST 15

void SPI_MasterTransmit(char data)
{
	SPDR = data;	/* Start transmission */
  a2:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)))	/* Wait for transmission complete */
  a4:	77 9b       	sbis	0x0e, 7	; 14
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <_Z18SPI_MasterTransmitc+0x2>
	;
}
  a8:	08 95       	ret

000000aa <_Z15MAX7219_SendCmdcc>:
void MAX7219_SendCmd(char addr, char data)
{
  aa:	cf 93       	push	r28
  ac:	c6 2f       	mov	r28, r22
	cbi(PORTB, SPI_SS);
  ae:	98 b3       	in	r25, 0x18	; 24
  b0:	18 ba       	out	0x18, r1	; 24
	SPI_MasterTransmit(addr);
  b2:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z18SPI_MasterTransmitc>
	SPI_MasterTransmit(data);
  b6:	8c 2f       	mov	r24, r28
  b8:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z18SPI_MasterTransmitc>
	sbi(PORTB, SPI_SS);
  bc:	88 b3       	in	r24, 0x18	; 24
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	88 bb       	out	0x18, r24	; 24
}
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <_Z12MAX7219_Initv>:
void MAX7219_Init(void)
{
	 MAX7219_SendCmd(0x09, 0x00);       //  no decoding
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	89 e0       	ldi	r24, 0x09	; 9
  ca:	0e 94 55 00 	call	0xaa	; 0xaa <_Z15MAX7219_SendCmdcc>
	 MAX7219_SendCmd(0x0a, 0x03);       //  brightness intensity
  ce:	63 e0       	ldi	r22, 0x03	; 3
  d0:	8a e0       	ldi	r24, 0x0A	; 10
  d2:	0e 94 55 00 	call	0xaa	; 0xaa <_Z15MAX7219_SendCmdcc>
	 MAX7219_SendCmd(0x0b, 0x07);       //  scan limit = 8 LEDs
  d6:	67 e0       	ldi	r22, 0x07	; 7
  d8:	8b e0       	ldi	r24, 0x0B	; 11
  da:	0e 94 55 00 	call	0xaa	; 0xaa <_Z15MAX7219_SendCmdcc>
	 MAX7219_SendCmd(0x0c, 0x01);       //  power down =0,normal mode = 1
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	8c e0       	ldi	r24, 0x0C	; 12
  e2:	0e 94 55 00 	call	0xaa	; 0xaa <_Z15MAX7219_SendCmdcc>
	 MAX7219_SendCmd(0x0f, 0x00);       //  no test display
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	8f e0       	ldi	r24, 0x0F	; 15
  ea:	0e 94 55 00 	call	0xaa	; 0xaa <_Z15MAX7219_SendCmdcc>
  ee:	08 95       	ret

000000f0 <_Z18MAX7219_SendStringPc>:
}

void MAX7219_SendString(char *str)
{
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	ec 01       	movw	r28, r24
		while (*str)
  fa:	88 81       	ld	r24, Y
  fc:	88 23       	and	r24, r24
  fe:	41 f1       	breq	.+80     	; 0x150 <_Z18MAX7219_SendStringPc+0x60>
 100:	01 e0       	ldi	r16, 0x01	; 1
 102:	10 e0       	ldi	r17, 0x00	; 0
		{
			for(int i = 1; i <= 8; i++)
 104:	09 30       	cpi	r16, 0x09	; 9
 106:	11 05       	cpc	r17, r1
 108:	c4 f4       	brge	.+48     	; 0x13a <_Z18MAX7219_SendStringPc+0x4a>
			{
				MAX7219_SendCmd(i, display[(*str - 55)][i-1]);
 10a:	88 81       	ld	r24, Y
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	c7 97       	sbiw	r24, 0x37	; 55
 110:	98 01       	movw	r18, r16
 112:	21 50       	subi	r18, 0x01	; 1
 114:	31 09       	sbc	r19, r1
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	8c 59       	subi	r24, 0x9C	; 156
 124:	9f 4f       	sbci	r25, 0xFF	; 255
 126:	fc 01       	movw	r30, r24
 128:	e2 0f       	add	r30, r18
 12a:	f3 1f       	adc	r31, r19
 12c:	60 81       	ld	r22, Z
 12e:	80 2f       	mov	r24, r16
 130:	0e 94 55 00 	call	0xaa	; 0xaa <_Z15MAX7219_SendCmdcc>

void MAX7219_SendString(char *str)
{
		while (*str)
		{
			for(int i = 1; i <= 8; i++)
 134:	0f 5f       	subi	r16, 0xFF	; 255
 136:	1f 4f       	sbci	r17, 0xFF	; 255
 138:	e5 cf       	rjmp	.-54     	; 0x104 <_Z18MAX7219_SendStringPc+0x14>
			{
				MAX7219_SendCmd(i, display[(*str - 55)][i-1]);
			}
			*str++;
 13a:	21 96       	adiw	r28, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	2f ef       	ldi	r18, 0xFF	; 255
 13e:	84 e3       	ldi	r24, 0x34	; 52
 140:	9c e0       	ldi	r25, 0x0C	; 12
 142:	21 50       	subi	r18, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <_Z18MAX7219_SendStringPc+0x52>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <_Z18MAX7219_SendStringPc+0x5c>
 14c:	00 00       	nop
 14e:	d5 cf       	rjmp	.-86     	; 0xfa <_Z18MAX7219_SendStringPc+0xa>
			_delay_ms(500);
		}
}
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	1f 91       	pop	r17
 156:	0f 91       	pop	r16
 158:	08 95       	ret

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
